trigger:
  branches:
    include:
    - main
    - develop
    - azuredevops
    - feature/*
    - bug/*

pr:
  branches:
    include:
    - main
    - develop

variables:
  - group: demo_var
  - group: fe

# Pool build
pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  jobs:
    - job: build
           
      steps:
      - checkout: self

      - task: NodeTool@0
        displayName: Use Node version
        inputs:
          versionSpec: $(nodeversion).x

      - task: replacetokens@5
        inputs:
          rootDirectory: '$(Build.SourcesDirectory)'
          targetFiles: '**/*.env.azure'
          encoding: 'auto'
          tokenPattern: 'default'
          writeBOM: true
          actionOnMissing: 'warn'
          keepToken: false
          actionOnNoFiles: 'continue'
          enableTransforms: false
          useLegacyPattern: false
          enableTelemetry: true
        displayName: 'Replace env'

      - task: Npm@1
        displayName: Npm Install
        inputs:
          command: 'ci'
        env:
          REACT_APP_ENV: Production

      - task: Npm@1
        displayName: Npm Run Build
        inputs:
          command: 'custom'
          customCommand: 'run build'
        env:
          REACT_APP_ENV: Production

      - task: Npm@1
        displayName: Run Unit Test
        inputs:
          command: 'custom'
          customCommand: 'run test'
        env:
          REACT_APP_ENV: Production
      
      - task: Docker@2
        displayName: Login to ACR
        inputs:
          containerRegistry: $(Registry)
          command: 'login'

      - task: Docker@2
        displayName: Build Docker Image
        inputs:
          containerRegistry: $(Registry)
          repository: $(containerName)/$(projectname)
          command: build
          Dockerfile: './.ci/Dockerfile.ci'
          buildContext: '.'
          arguments: '--build-arg BASEIMG=$(reactRuntimeImage) --build-arg IMG_VERSION=node$(nodeversion)-nginx'
          tags: |
            $(Build.BuildId)

      # Push Images to ACR
      - task: Docker@2
        displayName: Push Docker Image
        inputs:
          command: push
          repository: $(containerName)/$(projectname)
          containerRegistry: $(Registry)
          tags: |
            $(Build.BuildId)

      # Trivy
      - task: trivy@1
        displayName: Scan Source Code
        inputs:
          version: 'latest'
          path: './src'
          severities: 'CRITICAL,HIGH'
          exitCode: '0'

      - task: trivy@1
        displayName: Scan Docker Images
        inputs:
          version: 'latest'
          loginDockerConfig: true
          image: $(acrUrl)/$(containerName)/$(projectname):$(Build.BuildId)
          severities: 'CRITICAL,HIGH'
          exitCode: '0'

      # - task: replacetokens@4
      #   inputs:
      #     rootDirectory: '$(Build.SourcesDirectory)/.cd'
      #     targetFiles: '**/*.yml'
      #     encoding: 'auto'
      #     tokenPattern: 'default'
      #     writeBOM: true
      #     actionOnMissing: 'warn'
      #     keepToken: false
      #     actionOnNoFiles: 'continue'
      #     enableTransforms: false
      #     useLegacyPattern: false
      #     enableTelemetry: true
      #   displayName: 'Replace variables'
      #   condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.SourceBranchName'], 'develop')))

      # - task: PublishPipelineArtifact@1
      #   condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.SourceBranchName'], 'develop')))
      #   inputs:
      #     artifactName: 'manifests'
      #     path: '$(Build.SourcesDirectory)/.cd'